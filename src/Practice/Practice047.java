package Practice;// 코딩테스트 연습문제
// 큐, 딜레이, 처리시간에 따른 메시지 처리와 소실문자개수 구하기

import java.util.LinkedList;
import java.util.Queue;

public class Practice047 {
    public static int solution(int delay, int capacity, int[] times) {
        Queue<Integer> q = new LinkedList<>(); // 큐 객체 생성
        int seconds = 0; // 실제 시간
        int i = 0; // 1초 지날때마다 더해서 time배열의 숫자와 같아지면 메시지 하나씩 추가할 예정. 추가하면 초기화.
        int timeIdx = 0; // time 배열 인덱싱에 사용
        int tmpCount = 0; // 한꺼번에 메시지가 들어온 경우 카운트할 변수(즉, times 배열에 0이 있는 경우)
        int answer = 0; // 소실 메시지 개수

        // 메시지 작업 시작
        q.add(1);
        while(timeIdx!=times.length-1) { // 메시지 다 처리하지 않고 time배열 마지막까지 큐에 넣으면 끝
            // 큐에 있는 메시지 먼저 제거
            if(seconds % delay == 0 && q.size()>0) {
                q.poll();
            }
            // 메시지 큐에 넣기
            if(i==times[timeIdx] && timeIdx < times.length-1) { // times 배열의 있는 시간이 지났을때
                if(times[timeIdx+1]!=0) { // times 다음 배열에 0이 아니면
                    if (q.size() == capacity) { // 큐가 꽉 찼으면
                        answer++; // 큐로 못보내고 소실
                    } else { // 큐가 비어있으면
                        q.add(1); // 큐로 보내기
                    }
                } else if (times[timeIdx+1]==0) { // times 다음 배열이 0이면
                    tmpCount++; // times 배열에서 0이 아니었던 메시지까지 포함
                    while(times[timeIdx+1]==0) { // 다음 수가 0이 아닐때까지
                        timeIdx++; // 인덱스 옮기고
                        tmpCount++; // 메시지 개수 모아둠
                    }
                    while(tmpCount>0) { // 다 모았으면 모은거 큐에 하나씩 보냄
                        if (q.size() == capacity) { // 큐가 꽉 찼으면
                            answer++; // 큐로 못보내고 소실
                        } else { // 큐가 비어있으면
                            q.add(1); // 큐로 보내기
                        }
                        tmpCount--;
                    }
                }
                timeIdx++; // times 배열의 인덱스 뒤로 보내기
                i = 0; // i 초기화
            }
            seconds++; // 1초 지나고
            i++; // i도 1 추가하고
        }
        return answer;
    }
    public static void main(String[] args) {
//        System.out.println(solution(5, 5, new int[]{3, 2, 0, 0, 2, 3, 0, 0, 2, 2, 5}));
        // 3
//        System.out.println(solution(10, 13, new int[]{8, 5, 7, 0, 10, 8, 3, 9, 3, 4, 7, 3, 5, 7, 1, 4, 3, 2, 1, 7, 8, 5, 3, 7, 5, 3, 10, 6, 6, 3, 1, 6, 7, 4, 3, 1, 10, 9, 10, 5, 10, 4, 6, 6, 3, 6, 1, 6, 10, 6, 0, 7, 3, 8, 1, 5, 0, 5, 5, 0, 4, 9, 2, 0, 6, 2, 4, 1, 2, 6, 10, 5, 10, 9, 7, 2, 7, 8, 4, 2, 8, 10, 0, 1, 1, 0, 9, 5, 8, 7, 1, 10, 9, 9, 7, 10, 2, 10, 2, 3, 8, 7, 2, 1, 2, 4, 5, 6, 1, 0, 8, 8, 5, 7, 0, 3, 4, 10, 5, 1, 4, 2, 4, 7, 3, 6, 1, 8, 5, 3, 1, 4, 10, 2, 0, 0, 10, 6, 9, 7, 10, 9, 0, 5, 3, 4, 7, 10, 3, 8, 9, 8, 5, 5, 0, 2, 4, 5, 10, 5, 6, 6, 10, 0, 3, 8, 1, 3, 2, 10, 1, 2, 5, 1, 5, 0, 7, 10, 3, 10, 10, 10, 5, 8, 10, 10, 8, 3, 2, 7, 8, 8, 5, 4, 10, 4, 4, 3, 6, 3, 7, 4, 0, 3, 0, 9, 5, 7, 7, 10, 0, 4, 8, 3, 0, 7, 9, 0, 0, 6, 7, 10, 4, 9, 2, 7, 10, 0, 0, 4, 9, 10, 1, 1, 9, 7, 5, 8, 1, 2, 7, 6, 1, 4, 0, 3, 5, 3, 10, 8, 1, 3, 3, 10, 2, 2, 9, 10, 3, 7, 2, 0, 3, 8, 10, 8, 3, 1, 9, 8, 0, 5, 8, 2, 9, 10, 7, 2, 1, 1, 0, 7, 9, 9, 9, 9, 1, 4, 6, 2, 0, 1, 4, 10, 8, 0, 1, 4, 4, 3, 2, 6, 10, 8, 6, 2, 10, 5, 0, 3, 4, 6, 3, 7, 3, 3, 6, 2, 9, 2, 7, 7, 7, 3, 4, 0, 3, 5, 0, 3, 4, 8, 4, 0, 6, 2, 4, 9, 10, 10, 10, 9, 5, 7, 9, 4, 0, 7, 10, 4, 1, 2, 10, 0, 5, 7, 0, 6, 0, 5, 0, 3, 0, 6, 2, 7, 6, 1, 2, 6, 10, 7, 4, 5, 3, 10, 9, 4, 6, 2, 2, 8, 10, 7, 4, 3, 6, 8, 0, 0, 8, 1, 0, 7, 4, 7, 10, 5, 9, 4, 2, 5, 7, 3, 2, 7, 1, 6, 1, 9, 7, 1, 8, 0, 10, 7, 4, 5, 6, 2, 1, 8, 3, 8, 8, 6, 6, 2, 0, 5, 9, 1, 0, 2, 4, 2, 8, 2, 8, 4, 8, 9, 9, 10, 3, 8, 9, 1, 3, 2, 0, 8, 3, 7, 1, 9, 2, 7, 7, 4, 2, 2, 2, 2, 7, 6, 7, 0, 2, 5, 1, 9, 4, 2, 10, 0, 0, 5, 0, 2, 4, 3, 10, 2, 6, 3, 10, 3, 5, 2, 9, 5, 5, 6, 5, 3, 9, 4, 4, 4, 8, 6, 2, 10, 2, 0, 6, 1, 8, 6, 2, 4, 3, 7, 7, 9, 3, 2, 1, 1, 6, 10, 6, 0, 4, 2, 9, 2, 8, 9, 6, 0, 9, 5, 9, 1, 10, 2, 3, 8, 10, 4, 0, 2, 0, 6, 5, 8, 3, 10, 8, 7, 2, 3, 5, 2, 0, 7, 7, 10, 10, 3, 4, 7, 5, 1, 6, 10, 7, 5, 0, 10, 5, 7, 0, 1, 5, 5, 9, 5, 1, 0, 1, 7, 6, 4, 3, 4, 3, 2, 8, 3, 2, 8, 8, 4, 4, 9, 1, 2, 5, 9, 0, 2, 9, 6, 10, 5, 9, 4, 5, 9, 5, 2, 6, 10, 8, 8, 3, 6, 0, 0, 4, 5, 3, 3, 5, 2, 1, 10, 4, 1, 4, 8, 4, 2, 5, 0, 3, 3, 0, 8, 0, 4, 10, 9, 6, 1, 7, 5, 1, 6, 6, 6, 5, 6, 1, 9, 1, 4, 4, 8, 7, 1, 6, 3, 2, 0, 3, 7, 2, 1, 1, 8, 2, 8, 9, 4, 3, 6, 7, 1, 2, 4, 5, 10, 2, 1, 3, 10, 10, 9, 4, 0, 2, 5, 9, 10, 0, 6, 0, 10, 2, 6, 10, 8, 0, 8, 3, 2, 3, 7, 1, 6, 2, 6, 2, 6, 8, 9, 5, 8, 1, 1, 8, 0, 6, 2, 8, 10, 7, 10, 10, 10, 2, 10, 4, 8, 9, 8, 7, 1, 2, 1, 10, 7, 2, 3, 3, 0, 8, 10, 9, 0, 2, 4, 3, 5, 3, 7, 1, 1, 0, 10, 3, 9, 10, 3, 7, 8, 7, 1, 5, 1, 3, 5, 4, 2, 0, 9, 7, 2, 4, 9, 1, 0, 0, 1, 1, 1, 2, 10, 9, 6, 4, 10, 0, 10, 0, 2, 10, 8, 1, 7, 6, 10, 4, 1, 7, 5, 2, 5, 7, 9, 9, 3, 5, 9, 2, 2, 10, 7, 6, 4, 10, 0, 8, 10, 3, 3, 0, 2, 7, 7, 5, 8, 8, 4, 1, 7, 4, 5, 4, 4, 6, 3, 6, 5, 3, 9, 10, 5, 0, 8, 2, 5, 3, 1, 6, 9, 8, 9, 8, 7, 2, 10, 5, 4, 3, 8, 0, 0, 5, 3, 6, 8, 1, 4, 2, 7, 0, 4, 2, 10, 8, 6, 9, 10, 4, 8, 1, 8, 1, 4, 2, 9, 8, 0, 2, 7, 1, 3, 0, 5, 4, 4, 7, 1, 3, 7, 7, 10, 6, 2, 3, 4, 8, 9, 6, 10, 8, 10, 9, 10, 5, 2, 6, 7, 10, 1, 3, 5, 6, 8, 7, 1, 0, 4, 6, 7, 5, 5, 9, 9, 7, 2, 5, 2, 10, 9, 1, 4, 2, 9, 8, 8, 10, 8, 8, 6, 7, 4, 4, 8, 1, 8, 0, 7, 0, 3, 5, 5, 9, 3, 7, 4, 4, 5, 7, 5, 8, 7, 0, 8, 5, 8, 9, 6, 10, 2, 6, 4, 5, 2, 9, 8, 10, 6, 7, 5}));
        // 490
        System.out.println(solution(8, 18, new int[]{9, 8, 6, 1, 1, 0, 1, 1, 3, 7, 3, 5, 3, 0, 0, 3, 0, 3, 10, 4, 7, 4, 9, 4, 7, 1, 5, 0, 2, 9, 8, 0, 7, 2, 10, 1, 6, 7, 6, 2, 9, 8, 0, 3, 9, 2, 1, 2, 8, 4, 8, 8, 3, 4, 6, 10, 3, 2, 1, 6, 3, 9, 7, 9, 10, 2, 7, 7, 5, 5, 4, 8, 2, 10, 4, 5, 4, 10, 7, 8, 4, 8, 9, 3, 8, 7, 3, 6, 0, 6, 10, 1, 7, 1, 0, 5, 10, 7, 5, 6, 3, 4, 0, 4, 3, 0, 9, 5, 3, 3, 7, 9, 9, 10, 3, 8, 9, 1, 4, 8, 5, 7, 3, 10, 9, 2, 2, 2, 0, 5, 0, 8, 5, 5, 5, 1, 1, 2, 5, 10, 9, 2, 3, 8, 2, 6, 6, 0, 10, 10, 1, 7, 0, 4, 5, 6, 8, 8, 9, 9, 6, 7, 3, 7, 7, 1, 1, 9, 2, 7, 5, 0, 2, 9, 5, 1, 7, 6, 4, 9, 9, 1, 0, 0, 1, 2, 6, 10, 6, 1, 3, 1, 1, 5, 3, 6, 9, 1, 1, 5, 8, 5, 6, 2, 1, 3, 0, 8, 0, 8, 2, 6, 10, 0, 8, 10, 3, 4, 4, 5, 1, 9, 3, 10, 1, 9, 6, 6, 0, 5, 4, 3, 2, 3, 1, 8, 7, 0, 8, 6, 10, 8, 1, 10, 10, 4, 3, 10, 6, 10, 1, 7, 5, 5, 7, 4, 9, 6, 8, 4, 5, 10, 8, 7, 0, 7, 1, 6, 2, 3, 0, 5, 4, 4, 8, 9, 3, 5, 3, 6, 8, 1, 5, 5, 8, 9, 0, 5, 10, 10, 8, 6, 10, 3, 5, 5, 0, 4, 4, 7, 10, 10, 2, 1, 5, 6, 8, 6, 4, 8, 9, 4, 2, 7, 0, 7, 1, 1, 8, 1, 0, 0, 5, 5, 3, 5, 0, 2, 2, 8, 1, 10, 10, 6, 9, 3, 7, 3, 1, 0, 4, 5, 3, 1, 3, 3, 8, 4, 9, 4, 6, 1, 0, 2, 4, 8, 5, 6, 0, 7, 2, 6, 5, 10, 8, 8, 4, 8, 9, 7, 8, 8, 1, 5, 2, 0, 1, 3, 7, 4, 7, 8, 6, 8, 5, 5, 4, 7, 10, 3, 9, 5, 10, 3, 6, 7, 0, 7, 3, 2, 5, 8, 6, 1, 5, 1, 1, 6, 2, 0, 8, 4, 10, 9, 6, 10, 0, 1, 4, 2, 1, 3, 7, 3, 1, 3, 10, 9, 7, 8, 1, 5, 0, 5, 7, 8, 8, 7, 10, 5, 1, 6, 8, 1, 7, 4, 10, 5, 2, 2, 1, 6, 0, 0, 9, 7, 2, 3, 8, 9, 0, 3, 7, 9, 7, 4, 10, 0, 3, 8, 6, 5, 0, 7, 8, 1, 5, 1, 6, 5, 5, 8, 2, 2, 8, 8, 6, 8, 9, 4, 5, 7, 10, 5, 8, 0, 1, 5, 0, 6, 9, 4, 2, 3, 4, 7, 10, 9, 1, 5, 0, 7, 6, 10, 7, 2, 4, 1, 1, 6, 0, 5, 1, 0, 8, 2, 10, 9, 8, 6, 1, 6, 0, 8, 10, 4, 7, 2, 3, 4, 7, 3, 7, 4, 9, 0, 9, 4, 3, 3, 6, 1, 8, 8, 0, 8, 5, 3, 4, 1, 8, 3, 5, 4, 9, 8, 0, 2, 10, 0, 6, 9, 7, 6, 4, 0, 6, 10, 3, 3, 1, 4, 7, 5, 3, 4, 3, 5, 7, 6, 7, 6, 5, 0, 7, 8, 2, 6, 1, 7, 5, 1, 7, 9, 5, 3, 4, 6, 4, 3, 2, 1, 0, 6, 5, 5, 1, 6, 4, 6, 3, 10, 1, 3, 5, 2, 9, 1, 7, 4, 5, 2, 6, 8, 5, 4, 3, 4, 0, 4, 3, 8, 5, 1, 10, 8, 2, 5, 9, 4, 4, 9, 9, 9, 5, 10, 10, 0, 6, 1, 1, 10, 3, 9, 9, 2, 9, 10, 0, 7, 8, 9, 9, 8, 4, 3, 1, 1, 6, 2, 6, 10, 1, 3, 9, 6, 3, 0, 4, 5, 1, 8, 10, 9, 10, 7, 0, 5, 9, 10, 8, 9, 6, 0, 6, 3, 7, 7, 3, 8, 5, 6, 10, 5, 4, 1, 6, 5, 2, 6, 7, 2, 9, 9, 1, 7, 3, 4, 4, 9, 1, 5, 10, 9, 0, 6, 9, 8, 3, 1, 2, 9, 3, 4, 6, 10, 0, 2, 6, 3, 6, 7, 3, 6, 2, 4, 7, 7, 4, 1, 6, 6, 9, 9, 7, 7, 0, 10, 4, 6, 7, 8, 3, 2, 2, 9, 2, 1, 1, 9, 1, 1, 10, 4, 6, 8, 6, 2, 10, 8, 10, 8, 0, 4, 2, 7, 5, 9, 3, 6, 0, 6, 10, 5, 3, 6, 4, 2, 7, 2, 6, 6, 4, 1, 0, 3, 8, 7, 10, 8, 3, 5, 8, 0, 9, 5, 10, 10, 2, 5, 4, 1, 3, 8, 5, 1, 7, 0, 3, 10, 0, 9, 5, 5, 7, 3, 4, 6, 5, 10, 3, 3, 7, 3, 7, 0, 3, 10, 4, 1, 5, 6, 2, 6, 7, 2, 2, 6, 1, 6, 4, 3, 3, 4, 3, 0, 2, 1, 6, 2, 2, 7, 9, 7, 4, 0, 6, 1, 6, 5, 0, 8, 7, 7, 4, 6, 2, 6, 8, 2, 1, 3, 0, 0, 2, 8, 1, 10, 10, 7, 7, 1, 2, 4, 7, 3, 1, 2, 10, 3, 7, 6, 7, 5, 2, 10, 6, 5, 8, 3, 9, 6, 8, 7, 6, 5, 6, 10, 1, 0, 3, 2, 10, 3, 8, 7, 2, 6, 5, 1, 1, 0, 0, 7, 8, 7, 5, 9, 2, 1, 2, 1, 6, 10, 8, 6, 10, 6, 0, 8, 7, 4, 0, 2, 2, 6, 4, 9, 6, 10, 10, 10, 5, 4, 6, 0, 2, 7, 6, 6, 5, 10, 9, 10, 7, 6, 10, 6, 8, 3}));
        // 363
//        System.out.println(solution(5, 3, new int[]{4,3,2,1,4,3,2,1,2,2,2,2,2}));
    }
}
/*
[학습내용]
연습장에 먼저 구조를 잘 잡아보자!!! 생각보다 할 수 있다!!
겁먹지 말자!!
 */